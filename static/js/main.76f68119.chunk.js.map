{"version":3,"sources":["recoil/atoms.ts","components/Sidebar.tsx","components/ComponentToImg.jsx","components/CoverImg.tsx","components/Preview.tsx","components/App.tsx","index.tsx"],"names":["coverSettingsState","atom","key","default","Container","styled","div","Sidebar","useRecoilState","coverSettings","setCoverSettings","handleChange","e","value","target","name","htmlFor","text","onChange","type","textSize","textColor","borderSize","borderColor","imgWidth","imgHeight","DownloadButton","button","ComponentToImg","children","componentRef","useRef","ref","onClick","exportComponentAsPNG","props","backgroundColor","CoverImg","Preview","useRecoilValue","GlobalStyles","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAEaA,EAAqBC,eAAK,CACrCC,IAAK,qBACLC,QAAS,CACP,gBAAkB,MAClB,YAAc,UACd,WAAa,GACb,UAAY,IACZ,SAAW,IACX,KAAO,8BACP,UAAY,OACZ,SAAW,M,iZCNf,IAAMC,EAAYC,IAAOC,IAAV,KAsBFC,EAAoB,WAAO,IAAD,EACKC,yBAAeR,GADpB,mBAC9BS,EAD8B,KACfC,EADe,KAE/BC,EAAe,SAACC,GACpB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBH,EAAiB,eACZD,EADW,eAEbG,EAAEE,OAAOC,KAAOF,MAGrB,OACE,gBAACT,EAAD,KACE,gCAEA,yBAAOY,QAAQ,QAAf,QACA,4BACED,KAAK,OACLF,MAAOJ,EAAcQ,KACrBC,SAAUP,IAGZ,yBAAOK,QAAQ,YAAf,aACA,yBACEG,KAAK,SACLJ,KAAK,WACLF,MAAOJ,EAAcW,SACrBF,SAAUP,IAEZ,yBAAOK,QAAQ,aAAf,cACA,yBACEG,KAAK,OACLJ,KAAK,YACLF,MAAOJ,EAAcY,UACrBH,SAAUP,IAGZ,yBAAOK,QAAQ,cAAf,eACA,yBACEG,KAAK,SACLJ,KAAK,aACLF,MAAOJ,EAAca,WACrBJ,SAAUP,IAEZ,yBAAOK,QAAQ,eAAf,gBACA,yBACEG,KAAK,SACLJ,KAAK,cACLF,MAAOJ,EAAcc,YACrBL,SAAUP,IAGZ,yBAAOK,QAAQ,YAAf,aACA,yBACEG,KAAK,SACLJ,KAAK,WACLF,MAAOJ,EAAce,SACrBN,SAAUP,IAEZ,yBAAOK,QAAQ,aAAf,cACA,yBACEG,KAAK,SACLJ,KAAK,YACLF,MAAOJ,EAAcgB,UACrBP,SAAUP,M,kdCtFlB,IAAMP,EAAYC,IAAOC,IAAV,KAOToB,EAAiBrB,IAAOsB,OAAV,KAaPC,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzBC,EAAeC,mBACrB,OACE,kBAAC,EAAD,KACE,yBAAKC,IAAKF,GAAeD,GACzB,kBAACH,EAAD,CAAgBO,QAAS,kBAAMC,+BAAqBJ,KAApD,qB,kUCfN,IAAM1B,EAAYC,IAAOC,IAAV,KAEC,SAAC6B,GAAD,OAAWA,EAAMC,mBACrB,SAACD,GAAD,OAAWA,EAAMb,cAAsB,SAACa,GAAD,OAAWA,EAAMZ,eACzD,SAACY,GAAD,OAAWA,EAAMd,aAEb,SAACc,GAAD,OAAWA,EAAMf,YACpB,SAACe,GAAD,OAAWA,EAAMV,aAKlB,SAACU,GAAD,OAAWA,EAAMX,YAGfa,EAAoC,SAACF,GAAD,OAC/C,gBAAC,EAAcA,EACb,0BAAKA,EAAMlB,Q,kLCvBf,IAAMb,EAAYC,IAAOC,IAAV,KAQFgC,EAAoB,WAC/B,IAAM7B,EAAgB8B,yBAAevC,GACrC,OACE,gBAAC,EAAD,KACE,gBAAC,EAAD,KACE,gBAAC,EAAD,CACEoC,gBAAiB3B,EAAc2B,gBAC/Bb,YAAad,EAAcc,YAC3BD,WAAYb,EAAca,WAC1BG,UAAWhB,EAAcgB,UACzBD,SAAUf,EAAce,SACxBP,KAAMR,EAAcQ,KACpBI,UAAWZ,EAAcY,UACzBD,SAAUX,EAAcW,c,mbCtBlC,IAAMoB,EAAeC,YAAH,KAcZrC,EAAYC,IAAOC,IAAV,KAOFoC,EAAgB,kBAC3B,gBAAC,aAAD,KACE,gBAAC,EAAD,KACE,gBAACF,EAAD,MACA,gBAAC,EAAD,MACA,gBAAC,EAAD,SC7BNG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.76f68119.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nexport const coverSettingsState = atom({\r\n  key: \"coverSettingsState\",\r\n  default: {\r\n    \"backgroundColor\":\"red\",\r\n    \"borderColor\":\"#e9e9e9\",\r\n    \"borderSize\":30,\r\n    \"imgHeight\":480,\r\n    \"imgWidth\":720,\r\n    \"text\":\"Lorem ipsum dolor sit, amet\",\r\n    \"textColor\":\"blue\",\r\n    \"textSize\":25\r\n  }\r\n});","import * as React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { coverSettingsState } from \"../recoil/atoms\";\r\n\r\nconst Container = styled.div`\r\n  align-items: center;\r\n  border-right: 1px solid black;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  height: 100vh;\r\n  justify-content: center;\r\n  padding: 0 3rem;\r\n  h1 {\r\n    margin: 0 0 2rem 0;\r\n  }\r\n  label {\r\n    margin-top: 1.5rem;\r\n  }\r\n  input,\r\n  textarea {\r\n    margin-top: 1rem;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const Sidebar: React.FC = () => {\r\n  const [coverSettings, setCoverSettings] = useRecoilState(coverSettingsState);\r\n  const handleChange = (e: any) => {\r\n    const value = e.target.value;\r\n    setCoverSettings({\r\n      ...coverSettings,\r\n      [e.target.name]: value,\r\n    });\r\n  };\r\n  return (\r\n    <Container>\r\n      <h1>CM</h1>\r\n\r\n      <label htmlFor=\"text\">Text</label>\r\n      <textarea\r\n        name=\"text\"\r\n        value={coverSettings.text}\r\n        onChange={handleChange}\r\n      />\r\n\r\n      <label htmlFor=\"textSize\">TEXT-SIZE</label>\r\n      <input\r\n        type=\"number\"\r\n        name=\"textSize\"\r\n        value={coverSettings.textSize}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"textColor\">TEXT-COLOR</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"textColor\"\r\n        value={coverSettings.textColor}\r\n        onChange={handleChange}\r\n      />\r\n\r\n      <label htmlFor=\"borderSize\">BORDER-SIZE</label>\r\n      <input\r\n        type=\"number\"\r\n        name=\"borderSize\"\r\n        value={coverSettings.borderSize}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"borderColor\">BORDER-COLOR</label>\r\n      <input\r\n        type=\"border\"\r\n        name=\"borderColor\"\r\n        value={coverSettings.borderColor}\r\n        onChange={handleChange}\r\n      />\r\n\r\n      <label htmlFor=\"imgWidth\">IMG-WIDTH</label>\r\n      <input\r\n        type=\"number\"\r\n        name=\"imgWidth\"\r\n        value={coverSettings.imgWidth}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"imgHeight\">IMG-HEIGHT</label>\r\n      <input\r\n        type=\"number\"\r\n        name=\"imgHeight\"\r\n        value={coverSettings.imgHeight}\r\n        onChange={handleChange}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { exportComponentAsPNG } from \"react-component-export-image\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst DownloadButton = styled.button`\r\n  background: #15d798;\r\n  border-radius: 5px;\r\n  border: 0;\r\n  color: #ffffff;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  margin: 2rem 0 0 0;\r\n  padding: 20px 30px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ComponentToImg = ({ children }) => {\r\n  const componentRef = useRef();\r\n  return (\r\n    <Container>\r\n      <div ref={componentRef}>{children}</div>\r\n      <DownloadButton onClick={() => exportComponentAsPNG(componentRef)}>\r\n        Download as PNG\r\n      </DownloadButton>\r\n    </Container>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype CoverImgProps = {\r\n  backgroundColor: string;\r\n  borderColor: string;\r\n  borderSize: number;\r\n  imgHeight: number;\r\n  imgWidth: number;\r\n  text: string;\r\n  textColor: string;\r\n  textSize: number;\r\n};\r\n\r\nconst Container = styled.div<CoverImgProps>`\r\n  align-items: center;\r\n  background: ${(props) => props.backgroundColor};\r\n  border: ${(props) => props.borderSize}px solid ${(props) => props.borderColor};\r\n  color: ${(props) => props.textColor};\r\n  display: flex;\r\n  font-size: ${(props) => props.textSize}px;\r\n  height: ${(props) => props.imgHeight}px;\r\n  justify-content: center;\r\n  line-height: 3em;\r\n  padding: 3rem;\r\n  text-align: center;\r\n  width: ${(props) => props.imgWidth}px;\r\n`;\r\n\r\nexport const CoverImg: React.FC<CoverImgProps> = (props) => (\r\n  <Container {...props}>\r\n    <h2>{props.text}</h2>\r\n  </Container>\r\n);\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useRecoilValue } from \"recoil\";\r\n\r\nimport { ComponentToImg } from \"./ComponentToImg.jsx\";\r\nimport { CoverImg } from \"./CoverImg\";\r\nimport { coverSettingsState } from \"../recoil/atoms\";\r\n\r\nconst Container = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 3.5;\r\n  justify-content: center;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Preview: React.FC = () => {\r\n  const coverSettings = useRecoilValue(coverSettingsState);\r\n  return (\r\n    <Container>\r\n      <ComponentToImg>\r\n        <CoverImg\r\n          backgroundColor={coverSettings.backgroundColor}\r\n          borderColor={coverSettings.borderColor}\r\n          borderSize={coverSettings.borderSize}\r\n          imgHeight={coverSettings.imgHeight}\r\n          imgWidth={coverSettings.imgWidth}\r\n          text={coverSettings.text}\r\n          textColor={coverSettings.textColor}\r\n          textSize={coverSettings.textSize}\r\n        />\r\n      </ComponentToImg>\r\n    </Container>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport { Sidebar } from \"./Sidebar\";\r\nimport { Preview } from \"./Preview\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  *, *:before, *:after {\r\n    box-sizing: inherit;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: Open-Sans, Helvetica, Sans-Serif;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport const App: React.FC = () => (\r\n  <RecoilRoot>\r\n    <Container>\r\n      <GlobalStyles />\r\n      <Sidebar />\r\n      <Preview />\r\n    </Container>\r\n  </RecoilRoot>\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}